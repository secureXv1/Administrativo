datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===== ENUMS =====
enum UserRole {
  admin
  leader
}

// ===== MODELOS =====
model Group {
  id   Int     @id @default(autoincrement())
  code String  @unique
  name String?

  // Relaciones
  users   User[]
  reports DailyReport[]
  agents  Agent[]       @relation("GroupAgents")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  role         UserRole @default(leader)

  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id], map: "User_groupId_fkey")

  // Reportes en los que este usuario fue el líder que reportó (back-rel de DailyReport.leader)
  leaderReports DailyReport[] @relation("LeaderReports")
}

model DailyReport {
  id             Int      @id @default(autoincrement())
  reportDate     DateTime @db.Date
  checkpointTime DateTime @db.Time(0)

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], map: "DailyReport_groupId_fkey")

  leaderUserId Int
  leader       User @relation("LeaderReports", fields: [leaderUserId], references: [id], map: "DailyReport_leaderUserId_fkey")

  OF_effective Int
  SO_effective Int
  PT_effective Int
  OF_available Int
  SO_available Int
  PT_available Int
  OF_nov       Int
  SO_nov       Int
  PT_nov       Int

  notes     String?  @db.VarChar(191)
  createdAt DateTime @default(now()) @db.DateTime(3)
  updatedAt DateTime @updatedAt @db.DateTime(3)

  // Novedades por persona (back-rel de ReportNovelty.report)
  novelties ReportNovelty[]

  @@unique([reportDate, checkpointTime, groupId], map: "DailyReport_unique_report_corte_group")
}

model Agent {
  id       Int    @id @default(autoincrement())
  code     String @unique @db.VarChar(32) // Validación extra en API: ^[A-Z][0-9]+$
  category String @db.VarChar(8) // 'OF' | 'SO' | 'PT'

  groupId Int?
  group   Group? @relation("GroupAgents", fields: [groupId], references: [id], map: "Agent_groupId_fkey")

  // Back-rel de ReportNovelty.agent
  reportNovelties ReportNovelty[]
}

model Municipality {
  id   Int    @id @default(autoincrement())
  dept String @db.VarChar(80)
  name String @db.VarChar(120)

  // Back-rel de ReportNovelty.municipality
  novelties ReportNovelty[]

  @@unique([dept, name], map: "Municipality_dept_name_key")
}

model ReportNovelty {
  id Int @id @default(autoincrement())

  dailyReportId Int
  report        DailyReport @relation(fields: [dailyReportId], references: [id], map: "ReportNovelty_reportId_fkey")

  agentId Int
  agent   Agent @relation(fields: [agentId], references: [id], map: "ReportNovelty_agentId_fkey")

  type           String       @db.VarChar(20) // VACACIONES | PERMISO | SERVICIO
  municipalityId Int
  municipality   Municipality @relation(fields: [municipalityId], references: [id], map: "ReportNovelty_municipalityId_fkey")

  @@index([dailyReportId])
  @@index([agentId])
  @@index([municipalityId])
}
